#!/usr/bin/env bash
# Author
author="Philip Mello <@Microsoft>"
# Version
version="1.0"
# License
license="MIT"
# Date
current_date=$(date +'%b %d, %Y')
# GitHub
github='https://github.com/PhilipMello/kubernetes/'
github2='https://github.com/AtomyCloud/kubernetes'
# Microsoft Official Documentation
microsoft=''
echo "
# --------------------------------------------------------------
# Script     : Microsoft Azure AKS Script Automation
# Description: Create, Delete, Check, Fix. Azure AKS Cluster
# Version    : $version
# Date       : $current_date
# Author     : $author
# License    : $license
# Github     : $github
# Github     : $github2
# Microsoft  : $microsoft
# --------------------------------------------------------------
# How to use: Execute ./aks-tool
# Exemples:
# --------------------------------------------------------------
"
WHITE=""
BLUE="\033[97;104m"
YELLOW="\033[97;103m"
CYAN="\033[97;106m"
MAGENTA="\033[97;45m"
GREEN="\033[97;102m"
RED="\033[97;41m"
ENDCOLOR="\e[0m"

function create_aks() {
    echo "Enter Resource Group Name:"
    read resource_group
    echo "Enter Cluster Name:"
    read cluster_name
    echo "Enter Location:{eastus, swedencentral}"
    read location
    echo "Enter Node Count:{1, 2, 3,...}"
    read node_count
    echo "Enter Network Plugin:{azure, kubenet, none}"
    read network_plugin
    echo "Enter Tier:{free, premium, standard}"
    read tier
    echo "Enter OS SKU:{AzureLinux, CBLMariner, Mariner, Ubuntu}"
    read os_sku
    echo "Enter Node VM Size:{standard_ds2_v2}"
    read node_vm_size
    echo "Enter Managed Identity (MSI) OR Service Princiapl Name (SPN):{msi, spn}"
    read msi_or_spn

    if [[ "$msi_or_spn" == "msi" ]]; then
        msi_or_spn="--tags ManagedCluster:PhilipMelloScriptAutomation"
    elif [[ "$msi_or_spn" == "spn" ]]; then
        msi_or_spn="--service-principal --tags ServicePrincipal:PhilipMelloScriptAutomation"
    else
        echo "Invalid input. Please enter MSI or SPN."
    fi

    # Create AKS cluster
    az aks create --resource-group $resource_group --name $cluster_name --location $location --node-count $node_count --network-plugin $network_plugin --tier $tier --os-sku $os_sku --node-vm-size $node_vm_size $msi_or_spn
}

function delete_aks() {
    echo "Enter Resource Group:"
    read resource_group
    echo "Enter Cluster Name:"
    read cluster_name

    # Delete AKS cluster
    az aks delete --resource-group $resource_group --name $cluster_name
}

function check_cluster_status() {
    echo "Enter Resource Group:"
    read resource_group
    echo "Enter Cluster Name:"
    read cluster_name

    # Check if cluster is stopped or failed
    cluster_status=$(az aks show --resource-group $resource_group --name $cluster_name --query provisioningState -o tsv)
    echo "Cluster status: $cluster_status"
}

function check_credentials_status() {
    echo "Enter Resource Group:"
    read resource_group
    echo "Enter Cluster Name:"
    read cluster_name

    # Check cluster credentials
    credentials_status=$(az aks show --resource-group $resource_group --name $cluster_name --query servicePrincipalProfile.clientId -o tsv)
    credentials_list=$(az ad app credential list --id $credentials_status --query "[].endDateTime" -o tsv)
    echo "$credentials_status"
    echo "$credentials_list"
}

function reset_spn_credentials() {
    echo "Enter Resource Group:"
    read resource_group
    echo "Enter Cluster Name:"
    read cluster_name

    echo -e "
    +---------------------------------------------+
    |${RED}Status: Updating Service Principal Name (SPN)${ENDCOLOR}|
    +---------------------------------------------+
    "

    # Reset Service Princial Credentials (SPN)
    SP_ID=$(az aks show --resource-group $resource_group --name $cluster_name --query servicePrincipalProfile.clientId -o tsv)
    SP_SECRET=$(az ad app credential reset --id "$SP_ID" --query password -o tsv)
    SP_UPDATE=$(az aks update-credentials --resource-group $resource_group --name $cluster_name --reset-service-principal --service-principal "$SP_ID" --client-secret "${SP_SECRET}")
    eval $SP_UPDATE

    keyId=$(az ad app credential list --id $SP_ID --query [].keyId -o tsv)

    echo -e "
    +--------------------------------------------+
    |${GREEN}Status: Service Principal Name (SPN) Updated${ENDCOLOR}|
    +---------------------------------------------------------+
    |App Registrations: $SP_ID  |
    |Secret Password $SP_SECRET |
    |Secret ID: $keyId          |
    +---------------------------------------------------------+
    "
}

# Check if the AKS cluster has a PDB
function check_pdb() {

    command="kubectl get pdb --all-namespaces"
    pattern="0"
    output=$($command | grep "$pattern")

    if echo "$output" | grep -q "0"; then
        echo -e "
        "$output"
        ${RED}|The AKS cluster has a Pod Disruption Budget.${ENDCOLOR}|
        "
    else
        echo -e "${GREEN}|The AKS cluster does not have a Pod Disruption Budget.${ENDCOLOR}|"
    fi
}

function backup_pdb() {
    # Set your output file name here
    OUTPUT_FILE="pdb_backup.txt"

    # Get all PDBs in all namespaces
    kubectl get pdb --all-namespaces -o json > $OUTPUT_FILE

    echo "All PDBs have been backed up to $OUTPUT_FILE."
}

function check_memory_pressure() {

    # Check for memory pressure
    MEMORY_PRESSURE=$(kubectl describe nodes | grep "MemoryPressure")
    if [[ $MEMORY_PRESSURE == *"True"* ]]; then
        echo -e "${RED}|The cluster has memory pressure${ENDCOLOR}|"
    else
        echo -e "${GREEN}|The cluster does not have memory pressure${ENDCOLOR}|"
    fi
}

function enable_or_disable_monitoring_logs() {
    # Enable or Disable Monitoring logs
    # Microsoft Official documentation: https://learn.microsoft.com/en-us/azure/azure-monitor/containers/kubernetes-monitoring-disable
    echo "Enter Resource Group:"
    read resource_group
    echo "Enter Cluster Name:"
    read cluster_name
    echo "Choose Option: (1 = Enable / 2 = Disable)"
    read addons_option

    if [[ "$addons_option" == "1" ]]; then
        echo "Enabling Monitoring Logs"
        az aks enable-addons -a monitoring --resource-group $resource_group --name $cluster_name
    elif [[ "$addons_option" == "2" ]]; then
        echo "Disabling Monitoring Logs"
        az aks disable-addons -a monitoring --resource-group $resource_group --name $cluster_name
    else
        echo "Incorret Option"
    fi
}

function cluster_analysis() {
    echo "Enter Resource Group:"
    read resource_group
    echo "Enter Cluster Name:"
    read cluster_name

    # Get the credentials for the AKS cluster
    #az aks get-credentials --resource-group $resourceGroup --name $clusterName

    # Check for memory pressure
    check_memory_pressure_status=$(MEMORY_PRESSURE=$(kubectl describe nodes | grep "MemoryPressure")
    if [[ $MEMORY_PRESSURE == *"True"* ]]; then
        echo -e "${RED}|The cluster has memory pressure${ENDCOLOR}|"
    else
        echo -e "${GREEN}|The cluster DOES NOT have memory pressure${ENDCOLOR}|"
    fi)

    # Check for disk pressure
    check_disk_pressure_status=$(DISK_PRESSURE=$(kubectl describe nodes | grep "DiskPressure")
    if [[ $MEMORY_PRESSURE == *"True"* ]]; then
        echo -e "${RED}|The cluster has disk pressure${ENDCOLOR}|"
    else
        echo -e "${GREEN}|The cluster DOES NOT have disk pressure${ENDCOLOR}|"
    fi)

    # Check for PID pressure
    check_disk_pid_status=$(PID_PRESSURE=$(kubectl describe nodes | grep "PIDPressure")
    if [[ $MEMORY_PRESSURE == *"True"* ]]; then
        echo -e "${RED}|The cluster has PID pressure${ENDCOLOR}|"
    else
        echo -e "${GREEN}|The cluster DOES NOT have PID pressure${ENDCOLOR}|"
    fi)

    check_pdb_status=$(command="kubectl get pdb --all-namespaces"
    pattern="0"
    output_pdb=$($command | grep "$pattern")

    if echo "$output_pdb" | grep -q "0"; then
        echo -e "
        "$output"
        ${RED}|The AKS cluster has a Pod Disruption Budget.${ENDCOLOR}|
        "
    else
        echo -e "${GREEN}|The AKS cluster does not have a Pod Disruption Budget.${ENDCOLOR}|"
    fi)

    k8s_version=$(az aks show --resource-group $resource_group --name $cluster_name --query currentKubernetesVersion -o tsv)
    credentials_status=$(az aks show --resource-group $resource_group --name $cluster_name --query servicePrincipalProfile.clientId -o tsv)
    credentials_endtime=$(az ad app credential list --id $credentials_status --query "[].endDateTime" -o tsv)
    power_state=$(az aks show --resource-group $resource_group --name $cluster_name  --query powerState -o tsv)
    provisioning_state=$(az aks show --resource-group $resource_group --name $cluster_name --query provisioningState -o tsv)
    pdbCount=$(kubectl get pdb --all-namespaces | wc -l)
    pdbCount2=$(kubectl get pdb --all-namespaces | grep "0")
    pdbCount_message="AKS cluster has $pdbCount PDBs 
    and PDB: ${RED}$pdbCount2${ENDCOLOR}
    is not allowing for disruption, 
    warning: this may not allow the node to be drained and therefore blocking an upgrade process."
    echo -e "
    +---------------------+
    |${GREEN}AKS Analysis${ENDCOLOR}
    +---------------------------------------------------------+
    |Kubernetes Version: $k8s_version
    |SPN or MSI: $credentials_status 
    |Credentials End Time: $credentials_endtime               
    |Power State: $power_state                                
    |Provisioning State: $provisioning_state                  
    |$check_memory_pressure_status
    |$check_disk_pressure_status
    |$check_disk_pid_status
    +---------------------------------------------------------+
    |$check_pdb_status
    |$pdbCount_message
    +---------------------------------------------------------+
    "
}

# 
# 

echo "Choose an option:"
echo "1. Create AKS"
echo "2. Delete AKS"
echo "3. Check Cluster Status"
echo "4. Check Cluster Credentials"
echo "5. Reset Cluster Service Principal Credentials (SPN)"
echo "6. Check Pod Disruption Budget (PDB)"
echo "7. Backup Pod Disruption Budget (PDB)"
echo "8. Check Memory Pressure"
echo "9. Enable or Disable Monitoring logs"
echo "99. Cluster Analysis"
read option

case $option in
    1)
        create_aks
        ;;
    2)
        delete_aks
        ;;
    3)
        check_cluster_status
        ;;
    4)
        check_credentials_status
        ;;
    5)
        reset_spn_credentials
        ;;
    6)
        check_pdb
        ;;
    7)
        backup_pdb
        ;;
    8)
        check_memory_pressure
        ;;
    9)
        enable_or_disable_monitoring_logs
        ;;
    99)
        cluster_analysis
        ;;
    *)
        echo "Invalid option"
        ;;
esac
