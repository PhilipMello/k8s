#!/usr/bin/env bash
# Author
author="Philip Mello <@Microsoft>"
# Version
version="1.0"
# License
license="MIT"
# Date
current_date=$(date +'%b %d, %Y')
# GitHub
github='https://github.com/PhilipMello/kubernetes/'
github2='https://github.com/AtomyCloud/kubernetes'
# Microsoft Official Documentation
microsoft=''
echo "
# --------------------------------------------------------------
# Script     : Microsoft Azure AKS Script Automation
# Description: Create, Delete, Check, Fix. Azure AKS Cluster
# Version    : $version
# Date       : $current_date
# Author     : $author
# License    : $license
# Github     : $github
# Github     : $github2
# Microsoft  : $microsoft
# --------------------------------------------------------------
# How to use: Execute ./aks-tool
# Exemples:
# Manual: ./aks-tool -h OR ./aks-tool --h OR ./aks-tool --help
# --------------------------------------------------------------
"
WHITE=""
BLUE="\033[97;104m"
YELLOW="\033[97;103m"
CYAN="\033[97;106m"
MAGENTA="\033[97;45m"
GREEN="\033[97;102m"
RED="\033[97;41m"
ENDCOLOR="\e[0m"

function create_aks_default() {
    # Create AKS Default
    echo "Enter Resource Group Name:"
    read resource_group
    echo "Enter Cluster Name:"
    read cluster_name

    echo -e "
    +-------------------------------------------------------------------------+
    |${MAGENTA}AKS Creating${ENDCOLOR}
    +-------------------------------------------------------------------------+
    "  
    az aks create --resource-group $resource_group --name $cluster_name --node-count 1
    echo -e "
    +-------------------------------------------------------------------------+
    |${GREEN}AKS Created${ENDCOLOR}
    |Resource Group: $resource_group || Cluster Name: $cluster_name
    +-------------------------------------------------------------------------+
    "
    az aks get-credentials --resource-group $resource_group --name $cluster_name --overwrite-existing
}

function create_aks() {
    # Create AKS cluster
    echo "Enter Resource Group Name:"
    read resource_group
    echo "Enter Cluster Name:"
    read cluster_name
    echo "Enter Location:{centralus, eastus, eastus2, swedencentral}"
    read location
    echo "Enter Node Count:{1, 2, 3,...}"
    read node_count
    echo "Enter Network Plugin:{azure, kubenet, none}"
    read network_plugin
    echo "Enter Tier:{free, premium, standard}"
    read tier
    echo "Enter OS SKU:{AzureLinux, CBLMariner, Mariner, Ubuntu}"
    read os_sku
    echo "Enter Node VM Size:{Standard_B2s, standard_ds2_v2}"
    read node_vm_size
    echo "Enter Managed Identity (MSI) OR Service Princiapl Name (SPN):{msi, spn}"
    read msi_or_spn

    if [[ "$msi_or_spn" == "msi" ]]; then
        msi_or_spn="--tags ManagedCluster:PhilipMelloScriptAutomation"
    elif [[ "$msi_or_spn" == "spn" ]]; then
        msi_or_spn="--service-principal --tags ServicePrincipal:PhilipMelloScriptAutomation"
    else
        echo "Invalid input. Please enter MSI or SPN."
    fi

    echo -e "
    +-------------------------------------------------------------------------+
    |${MAGENTA}AKS Creating${ENDCOLOR}
    +-------------------------------------------------------------------------+
    "  
    az aks create --resource-group $resource_group --name $cluster_name --location $location --node-count $node_count --network-plugin $network_plugin --tier $tier --os-sku $os_sku --node-vm-size $node_vm_size $msi_or_spn
    echo -e "
    +-------------------------------------------------------------------------+
    |${GREEN}AKS Created${ENDCOLOR}
    |Resource Group: $resource_group || Cluster Name: $cluster_name
    +-------------------------------------------------------------------------+
    |$(aks_get_url)
    +-------------------------------------------------------------------------+
    "  
    az aks get-credentials --resource-group $resource_group --name $cluster_name --overwrite-existing
}

function delete_aks() {
    # Delete AKS cluster
    echo "Enter Resource Group:"
    read resource_group
    echo "Enter Cluster Name:"
    read cluster_name

    echo -e "
    +-------------------------------------------------------------------------+
    |${RED}Deleting AKS${ENDCOLOR}
    +-------------------------------------------------------------------------+
    "
    az aks delete --resource-group $resource_group --name $cluster_name
}

function check_cluster_status() {
    # Check if cluster is: Stopped, Faieled, Succeeded, K8S Version
    k8s_version=$(az aks show --resource-group $resource_group --name $cluster_name --query currentKubernetesVersion -o tsv)
    power_state=$(az aks show --resource-group $resource_group --name $cluster_name  --query powerState -o tsv)
    provisioning_state=$(az aks show --resource-group $resource_group --name $cluster_name --query provisioningState -o tsv)
    echo "Cluster Status: $k8s_version
    |Power State: $power_state
    |Provisioning State: $provisioning_state"
}

function check_credentials_status() {
    # Check cluster credentials
    credentials_status=$(az aks show --resource-group $resource_group --name $cluster_name --query servicePrincipalProfile.clientId -o tsv)
    credentials_endtime=$(az ad app credential list --id $credentials_status --query "[].endDateTime" -o tsv)
    echo "$credentials_status"
    echo "$credentials_list"
}

function reset_spn_credentials() {
    echo "Enter Resource Group:"
    read resource_group
    echo "Enter Cluster Name:"
    read cluster_name

    echo -e "
    +---------------------------------------------+
    |${RED}Status: Updating Service Principal Name (SPN)${ENDCOLOR}|
    +---------------------------------------------+
    "

    # Reset Service Princial Credentials (SPN)
    SP_ID=$(az aks show --resource-group $resource_group --name $cluster_name --query servicePrincipalProfile.clientId -o tsv)
    SP_SECRET=$(az ad app credential reset --id "$SP_ID" --query password -o tsv)
    SP_UPDATE=$(az aks update-credentials --resource-group $resource_group --name $cluster_name --reset-service-principal --service-principal "$SP_ID" --client-secret "${SP_SECRET}")
    eval $SP_UPDATE

    keyId=$(az ad app credential list --id $SP_ID --query [].keyId -o tsv)

    echo -e "
    +--------------------------------------------+
    |${GREEN}Status: Service Principal Name (SPN) Updated${ENDCOLOR}|
    +---------------------------------------------------------+
    |App Registrations: $SP_ID  |
    |Secret Password $SP_SECRET |
    |Secret ID: $keyId          |
    +---------------------------------------------------------+
    "
}

function check_pdb() {
    # Check if the AKS cluster has a PDB
    # Microsoft Official documentation: https://learn.microsoft.com/en-us/troubleshoot/azure/azure-kubernetes/error-code-poddrainfailure#symptoms
    pdbCount=$(kubectl get pdb --all-namespaces | wc -l)
    pdbCount2=$(kubectl get pdb --all-namespaces | grep "0")
    command="kubectl get pdb --all-namespaces"
    pattern="0"
    output=$($command | grep "$pattern")

    if echo "$output" | grep -q "0"; then
        echo -e "
        AKS cluster has $pdbCount PDBs and PDB:
        |${RED}$pdbCount2${ENDCOLOR}|
        is not allowing for disruption, 
        warning: this may not allow the node to be drained and therefore blocking an upgrade process.
        "
    else
        echo -e "${GREEN}|The AKS cluster does not have a Pod Disruption Budget.${ENDCOLOR}|"
    fi
}

function backup_pdb() {
    # Set your output file name here
    OUTPUT_FILE="pdb_backup.yaml"

    # Get all PDBs in all namespaces
    kubectl get pdb --all-namespaces -o json > $OUTPUT_FILE
    echo "All PDBs have been backed up to $OUTPUT_FILE."
}

function check_memory_pressure() {
    # Check for memory pressure
    MEMORY_PRESSURE=$(kubectl describe nodes | grep "MemoryPressure")
    if [[ $MEMORY_PRESSURE == *"True"* ]]; then
        echo -e "${RED}|The cluster has memory pressure${ENDCOLOR}|"
    else
        echo -e "${GREEN}|The cluster DOES NOT have memory pressure${ENDCOLOR}|"
    fi
}

function check_disk_pid_status() {
    # Check for PID pressure
    PID_PRESSURE=$(kubectl describe nodes | grep "PIDPressure")
    if [[ $PID_PRESSURE == *"True"* ]]; then
        echo -e "${RED}|The cluster has PID pressure${ENDCOLOR}|"
    else
        echo -e "${GREEN}|The cluster DOES NOT have PID pressure${ENDCOLOR}|"
    fi
}

function check_disk_pressure_status() {
    # Check for disk pressure
    DISK_PRESSURE=$(kubectl describe nodes | grep "DiskPressure")
    if [[ $DISK_PRESSURE == *"True"* ]]; then
        echo -e "${RED}|The cluster has disk pressure${ENDCOLOR}|"
    else
        echo -e "${GREEN}|The cluster DOES NOT have disk pressure${ENDCOLOR}|"
    fi
}

function enable_or_disable_monitoring_logs() {
    # Enable or Disable Monitoring logs
    # Microsoft Official documentation: https://learn.microsoft.com/en-us/azure/azure-monitor/containers/kubernetes-monitoring-disable
    echo "Enter Resource Group:"
    read resource_group
    echo "Enter Cluster Name:"
    read cluster_name
    echo "Choose Option: (1 = Enable / 2 = Disable)"
    read addons_option

    if [[ "$addons_option" == "1" ]]; then
        echo "Enabling Monitoring Logs"
        az aks enable-addons -a monitoring --resource-group $resource_group --name $cluster_name
    elif [[ "$addons_option" == "2" ]]; then
        echo "Disabling Monitoring Logs"
        az aks disable-addons -a monitoring --resource-group $resource_group --name $cluster_name
    else
        echo "Incorret Option"
    fi
}

function check_acr_connection() {
    # Check ACR connection issues
    az acr list -o table
    echo "Enter ACR Name"
    read acr_link
    acr_token=$(az account get-access-token -o tsv --query=accessToken)
    curl -H "Authorization: Bearer $acr_token"  https://$acr_link.azurecr.io/oauth2/exchange
}

function aks_get_url() {
    # Get AKS URL Azure Portal
    # Microsoft Official documentation: https://learn.microsoft.com/pt-pt/cli/azure/aks?view=azure-cli-latest#az-aks-browse
    aks_azure_link=$(az aks browse --resource-group $resource_group --name $cluster_name)
    echo "
    |$aks_azure_link"
}

function aks_get_top_nodes() {
    # Get top nodes by memory
    kubectl top nodes --sort-by=memory
}

function aks_get_top_pods() {
    # Get top pods by memory
    kubectl top pods --sort-by=memory -A
}

function aks_describe_nodes() {
    # Describe nodes
    echo ""
}

function aks_check_top() {
    # Get Pod, Node Logs
    folderlogs=aks-top-logs
    mkdir $folderlogs
    kubectl top nodes --sort-by=memory > $folderlogs/topNodes.txt
    kubectl top pods --sort-by=memory -A > $folderlogs/topPods.txt
    zip -r aks-top-logs.zip $folderlogs
    echo "Logs has been saved in $folderlogs and zip file: aks-top-logs.zip"

}

function aks_tcpdump() {
    # Get tcpdump
    # https://github.com/josecaneira/aks-lab/tree/main/tcpdump_daemonset

    echo -e "
    +-------------------------------------------------------------------------+
    |A PV/PVC file share will be created on the AKS cluster default storage account 
    |that then can be browsed on your cluster managed Resource Group "MC_" using Azure Portal. 
    |If no default storage account exists a new one will be created, 
    |please remember to delete it after it no longer being required.
    |
    +-------------------------------------------------------------------------+"
    kubectl apply -f https://github.com/josecaneira/aks-lab/raw/main/tcpdump_daemonset/tcpdump_ds.yaml
    kubectl get pv|grep tcpdump

}

function aks_get_syslog() {
    # Get SysLog
    kubectl get nodes
    echo "Enter node name"
    read node_name
    kubectl debug node/$node_name --image=nginx
	kubectl get pods
    echo "Enter pods name"
    read pod_name
	kubectl cp $pod_name:/host/var/log/ /tmp/log
	zip -r syslog.zip /tmp/log
    echo "Logs has been saved in syslog.zip in the current folder"

}

function aks_get_configmap() {
    # Get Configmap
    kubectl get configmap -A
}

function aks_information() {
    # AKS insights
    az aks show --resource-group $resource_group --name $cluster_name --query linuxProfile.adminUsername -o tsv
    az aks show --resource-group $resource_group --name $cluster_name --query linuxProfile.ssh.publicKeys[0].keyData -o tsv
    az aks show --resource-group $resource_group --name $cluster_name --query location -o tsv
    az aks show --resource-group $resource_group --name $cluster_name --query sku.tier -o tsv
    az aks show --resource-group $resource_group --name $cluster_name --query nodeProvisioningProfile -o tsv
}

function aks_nodepool_information() {
    # Nodepoool information
    # Microsoft Official documentation: https://learn.microsoft.com/en-US/cli/azure/aks/nodepool?view=azure-cli-latest#az_aks_nodepool_list
    az aks nodepool list $resource_group --name $cluster_name -o wide
}

function az_create_resource_group() {
    # Create Resource Group
    echo "Enter Resource Group Name:"
    read resource_group
    echo "To see locations run: az account list-locations -o table"
    echo "Enter Resource Group location:"
    read location
    echo "Enter tag name, or hit enter to no tag"
    read tags
    az group create --name $resource_group --location $location --tags $tags
}

function aks_update_upgrade() {
    # Update OR Upgrade
    echo "1. Upgrade AKS"
    echo "2. Upgrade Nodepool"
    echo "Enter your option:"
    read option

    case $option in
    1)
        echo "Enter Resource Group:"
        read resource_group
        echo "Enter Cluster Name:"
        read cluster_name
        echo "Enter your desired Kubernetes Version | Ex: 1.27.9, 1.28.3, 1.28.5"
        read k8s_version
        az aks upgrade --resource-group $resource_group --name $cluster_name --kubernetes-version $k8s_version
        ;;
    2)
        echo "Enter Resource Group:"
        read resource_group
        echo "Enter Cluster Name:"
        read cluster_name
        echo "Enter your Nodepool Name"
        read nodepool_name
        echo "Enter your desired Kubernetes Version | Ex: 1.27.9, 1.28.3, 1.28.5"
        read k8s_version
        az aks nodepool upgrade --resource-group $resource_group --cluster-name $cluster_name --name $nodepool_name --kubernetes-version $k8s_version
        ;;
    *)
        echo "Invalid choice. Please select 1 or 2."
        ;;

    esac
}

function aks_version_list_location() {
    # List AKS version by location
    az account list-locations -o table
    echo "Enter location"
    read location
    az aks get-versions --location $location --output table
}

function aks_get_pv_pvc() {
    # List all PV and PVC
    kubectl get pv
    kubectl get pvc
}

function aks_enable_disable_addon() {
    # AKS Enable or Disable Addons
    echo "1. Enable AKS Backup Extension"
    echo "Enter your option:"
    read option
    case $option in
    1)
        # Microsoft Official Documentation: https://learn.microsoft.com/en-us/azure/backup/azure-kubernetes-service-cluster-manage-backups
        echo "AKS Backup extension"
        echo "Enter Resource Group:"
        read resource_group
        echo "Enter Cluster Name:"
        read cluster_name
        echo "Storage Account Name"
        read storageaccount_name
        echo "Blob Container Name"
        read blobcontainer_name
        echo "Storage Account Resource Group Name"
        read storageaccount_resource_group_name
        echo "Storage Account Subscription Id"
        read storageaccountsubscriptionid
        echo -e "
        +-------------------------------------------------------------------------+
        |${MAGENTA}Enabling AKS Backup Extension${ENDCOLOR}
        +-------------------------------------------------------------------------+
        "
        az k8s-extension create --name azure-aks-backup --extension-type microsoft.dataprotection.kubernetes --scope cluster --cluster-type managedClusters --cluster-name $cluster_name --resource-group $resource_group --release-train stable --configuration-settings blobContainer=$blobcontainer_name storageAccount=$storageaccount_name storageAccountResourceGroup=$storageaccount_resource_group_name storageAccountSubscriptionId=$storageaccountsubscriptionid
        ;;
    *)
        echo "Invalid choice. Please select 1 or 2."
        ;;
    esac
}

function cluster_analysis() {
    # AKS Cluster Analysis
    echo "Enter Resource Group:"
    read resource_group
    echo "Enter Cluster Name:"
    read cluster_name

       echo -e "
    +-----------------------+
    |${MAGENTA}Analysing Cluster...${ENDCOLOR}   |
    +-----------------------+
    "

function cluster_on_off() {
    power_state=$(az aks show --resource-group $resource_group --name $cluster_name --query powerState -o tsv)
    if [[ "$power_state" != "Stopped" ]]; then
    echo -e "
    +-------------------------------------------------------------------------+
    |${GREEN}AKS Analysis${ENDCOLOR}
    |Resource Group: $resource_group || Cluster Name: $cluster_name
    +-------------------------------------------------------------------------+
    |$(aks_get_url)
    +-------------------------------------------------------------------------+        
    |$(check_cluster_status)
    |$(check_memory_pressure)
    |$(check_disk_pressure_status)
    |$(check_disk_pid_status)
    +---------------------------------------------------------+
    |$(check_pdb)
    +---------------------------------------------------------+
    |NODES:
    |$(aks_get_top_nodes)
    +---------------------------------------------------------+
    |PODS:
    |$(aks_get_top_pods)
    +---------------------------------------------------------+
    |Configmap:
    |$(aks_get_configmap)
    "
    else
        echo -e "
    +-------------------------------------------------------------------------+
    |${GREEN}AKS Analysis${ENDCOLOR}
    |${RED}Start your cluster to analyze in more detail${ENDCOLOR}
    |Resource Group: $resource_group || Cluster Name: $cluster_name
    +-------------------------------------------------------------------------+       
    |$(check_cluster_status)
    +-------------------------------------------------------------------------+
    |Run: az aks start --resource-group $resource_group --name $cluster_name
    +-------------------------------------------------------------------------+
    | or go to Azure Portal to Start
    +-------------------------------------------------------------------------+
    |$(aks_get_url)
    |
    |
    +-------------------------------------------------------------------------+
    "
    fi
    }
    cluster_on_off
}

# ---

# Manual
manual() {
    echo -e "Get AKS Credentials: 'https://docs.microsoft.com/en-US/cli/azure/aks#az_aks_get_credentials'"
    echo -e "Option 1, create AKS cluster with default option in Azure (FAST)"
    echo -e "Option 2, create a cluster by passing the parameters:
    --location --node-count --network-plugin --tier --os-sku --node-vm-size $msi_or_spn
"
exit 0
}

if [[ $1 == "-h" || $1 == "--help" || "$1" == "--h" ]]; then
    manual
    exit 1
fi

echo "Choose an option:"
echo "1. Create Resource Group"
echo "2. Create AKS Default"
echo "3. Create AKS with other options"
echo "4. Delete AKS"
echo "5. Reset Cluster Service Principal Credentials (SPN)"
echo "6. Backup Pod Disruption Budget (PDB)"
echo "7. Enable or Disable Monitoring Logs"
echo "8. Check ACR Connection"
echo "9. Check Top (Pods and Nodes)"
echo "10. Get TCPDUMP"
echo "11. Get SysLog"
echo "12. Get AKS Versions by location"
echo "13. Upgrade AKS or Nodepool"
echo "14. AKS Enable or Disable Addons"
echo "99. Cluster Analysis (MSI, SPN, PDB, PowerState, Credentials,...)"
read option

case $option in
    1)
        az_create_resource_group
        ;;
    2)  
        create_aks_default
        ;;
    3)
        create_aks
        ;;
    4)
        delete_aks
        ;;
    5)
        reset_spn_credentials
        ;;
    6)
        backup_pdb
        ;;
    7)
        enable_or_disable_monitoring_logs
        ;;
    8)
        check_acr_connection
        ;;
    9) 
        aks_check_top
        ;;
    10)
        aks_tcpdump
        ;;
    11) 
        aks_get_syslog
        ;;
    12)
        aks_version_list_location
        ;;
    13) 
        aks_update_upgrade
        ;;
    14)
        aks_enable_disable_addon
        ;;
    99)
        cluster_analysis
        ;;
    *)
        echo "Invalid option"
        ;;
esac
