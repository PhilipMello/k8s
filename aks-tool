#!/usr/bin/env bash
# Author
author="Philip Mello <@Microsoft>"
# Version
version="1.0"
# License
license="MIT"
# Date
current_date=$(date +'%b %d, %Y')
# GitHub
github='https://github.com/PhilipMello/kubernetes/'
github2='https://github.com/AtomyCloud/kubernetes'
# Microsoft Official Documentation
microsoft=''
AKS_Kubernetes_release_calendar='https://learn.microsoft.com/en-us/azure/aks/supported-kubernetes-versions?tabs=azure-cli#aks-kubernetes-release-calendar'
echo "
# --------------------------------------------------------------
# Script     : Microsoft Azure AKS Script Automation
# Description: Create, Delete, Check, Fix. Azure AKS Cluster
# Version    : $version
# Date       : $current_date
# Author     : $author
# License    : $license
# Github     : $github
# Github     : $github2
# Microsoft  : $microsoft
# --------------------------------------------------------------
# How to use: Execute ./aks-tool
# Exemples:
# Manual: ./aks-tool -h OR ./aks-tool --h OR ./aks-tool --help
# --------------------------------------------------------------
"
WHITE=""
BLUE="\033[97;104m"
YELLOW="\033[97;103m"
CYAN="\033[97;106m"
MAGENTA="\033[97;45m"
GREEN="\033[97;102m"
RED="\033[97;41m"
ENDCOLOR="\e[0m"

function az_resource_group() {
    echo -e " Microsoft Official Documentation: 
    'https://learn.microsoft.com/en-us/cli/azure/group?view=azure-cli-latest'
    "
    echo "1. Create Resource Group"
    echo "2. Delete Resource Group"
    echo "3. Force Delete Resource Group"
    echo "4. Check if a Resource Group exists"
    read option
    case $option in
        1)
            echo "Create Resource Group"
            echo "Enter Resource Group Name:"
            read resource_group
            echo "To see locations run: az account list-locations -o table"
            echo "Enter Resource Group location:"
            read location
            echo "Enter tag name, or hit enter to no tag, Ex: aks=prod"
            read tags
            az group create --name $resource_group --location $location --tags $tags
            exit 110
            ;;
        2)
            echo "Delete Resource Group"
            echo "Enter Resource Group Name:"
            read resource_group
            az group delete --name $resource_group
            exit 120
            ;;
        3)
            echo "Force Delete Resource Group"
            echo "Enter Resource Group Name:"
            read resource_group
            az group delete --name $resource_group --force-deletion-types Microsoft.Compute/virtualMachines
            exit 130
            ;;
        4)
            echo "Check if a Resource Group exists"
            echo "Enter Resource Group Name:"
            read resource_group
            az group exists --name $resource_group
            if [ $? -eq 0 ]; then
                exit 140
            fi
            ;;
        *)
            echo "Invalid option"
            ;;
    esac
}

function az_aks() {
    # AKS Creation
    echo -e "az aks create: 
    'https://learn.microsoft.com/pt-pt/cli/azure/aks?view=azure-cli-latest#az-aks-create'
    "
    echo -e "General purpose virtual machine sizes: 
    'https://learn.microsoft.com/en-us/azure/virtual-machines/sizes-general'
    "
    echo "1. Create AKS Default"
    echo "2. Create AKS with more options (Location, Node-Count, Network-Plugin, Tier, OS-SKU, VM-Size)"
    echo "3. Create Private AKS with more options (Location, Node-Count, Network-Plugin, Tier, OS-SKU, VM-Size)"
    echo "4. Delete AKS"
    echo "5. Reset Cluster Service Principal Credentials (SPN)"
    echo "6. Manually rotate your cluster certificates"
    echo "7. Upgrade AKS or Nodepool"
    echo "8. AKS Enable or Disable Addons"
    echo "9. Enable or Disable CSI storage drivers on an existing cluster"
    echo "10. Get AKS Versions by location"
    echo "11. AKS Debug Node"
    read option

    case $option in
    1)
        # Create AKS Default
        echo "Enter Resource Group Name:"
        read resource_group
        echo "Enter Cluster Name:"
        read cluster_name

        echo -e "
        +-------------------------------------------------------------------------+
        |${MAGENTA}AKS Creating${ENDCOLOR}
        +-------------------------------------------------------------------------+
        "  
        az aks create --resource-group $resource_group --name $cluster_name --node-count 1 --tags AKS_ManagedCluster=PhilipMelloScriptAutomation
        echo -e "
        +-------------------------------------------------------------------------+
        |${GREEN}AKS Created${ENDCOLOR}
        |Resource Group: $resource_group || Cluster Name: $cluster_name
        +-------------------------------------------------------------------------+
        "
        az aks get-credentials --resource-group $resource_group --name $cluster_name --overwrite-existing
        ;;
    2)
        # Create AKS with options
        echo "Enter Resource Group Name:"
        read resource_group
        echo "Enter Cluster Name:"
        read cluster_name
        echo "Enter Location:{centralus, eastus, eastus2, swedencentral}"
        read location
        echo "Enter Node Count:{1, 2, 3,...}"
        read node_count
        echo "Enter Network Plugin:{azure, kubenet, none}"
        read network_plugin
        echo "Enter Tier:{free, premium, standard}"
        read tier
        read -p "Enter Kubernetes version, Ex:.(1.27.9, 1.28.3, 1.28.5, 1.29.0, 1.29.2)": kubernetes_version
        echo "Enter OS SKU:{AzureLinux, CBLMariner, Mariner, Ubuntu}"
        read os_sku
        echo "Enter Node VM Size:{Standard_B2s, Standard_D3_v2, Standard_D16d_v4, standard_ds2_v2}"
        read node_vm_size
        echo "Enter Managed Identity (MSI) OR Service Princiapl Name (SPN):{msi, spn}"
        read msi_or_spn
        echo "Enable Microsoft Entra integration and Azure RBAC for Kubernetes Authorization? Enter (y, n)"
        read "enable_aad_rbac"

        if [[ "$msi_or_spn" == "msi" ]]; then
            msi_or_spn="--tags AKS_ManagedCluster=PhilipMelloScriptAutomation"
        elif [[ "$msi_or_spn" == "spn" ]]; then
            msi_or_spn="--service-principal --tags AKS_ServicePrincipal=PhilipMelloScriptAutomation"
        else
            echo "Invalid input. Please enter MSI or SPN."
        fi

        if [[ $enable_aad_rbac == [Yy] ]]; then
            enable_aad_rbac="--enable-aad --enable-azure-rbac"
        elif [[ $enable_aad_rbac == [Nn] ]]; then
            enable_aad_rbac=""
        else
            echo "Invalid input."
        fi

        echo -e "
        +-------------------------------------------------------------------------+
        |${MAGENTA}AKS Creating${ENDCOLOR}
        +-------------------------------------------------------------------------+
        "  
        az aks create --resource-group $resource_group --name $cluster_name --location $location --node-count $node_count --network-plugin $network_plugin --tier $tier --kubernetes-version $kubernetes_version --os-sku $os_sku --node-vm-size $node_vm_size $msi_or_spn $enable_aad_rbac
        echo -e "
        +-------------------------------------------------------------------------+
        |${GREEN}AKS Created${ENDCOLOR}
        |Resource Group: $resource_group || Cluster Name: $cluster_name
        +-------------------------------------------------------------------------+
        |$(aks_get_url)
        +-------------------------------------------------------------------------+
        "  
        az aks get-credentials --resource-group $resource_group --name $cluster_name --overwrite-existing
        ;;
    3)
        # Create AKS with options
        echo "Enter Resource Group Name:"
        read resource_group
        echo "Enter Cluster Name:"
        read cluster_name
        echo "Enter Location:{centralus, eastus, eastus2, swedencentral}"
        read location
        echo "Enter Node Count:{1, 2, 3,...}"
        read node_count
        echo "Enter Network Plugin:{azure, kubenet, none}"
        read network_plugin
        echo "Enter Tier:{free, premium, standard}"
        read tier
        echo "Enter OS SKU:{AzureLinux, CBLMariner, Mariner, Ubuntu}"
        read os_sku
        echo "Enter Node VM Size:{Standard_B2s, Standard_D3_v2, Standard_D16d_v4, standard_ds2_v2}"
        read node_vm_size
        echo "Enter Managed Identity (MSI) OR Service Princiapl Name (SPN):{msi, spn}"
        read msi_or_spn
        echo "Enable Microsoft Entra integration and Azure RBAC for Kubernetes Authorization? Enter (y, n)"
        read "enable_aad_rbac"

        if [[ "$msi_or_spn" == "msi" ]]; then
            msi_or_spn="--tags AKS_ManagedCluster=PhilipMelloScriptAutomation"
        elif [[ "$msi_or_spn" == "spn" ]]; then
            msi_or_spn="--service-principal --tags AKS_ServicePrincipal=PhilipMelloScriptAutomation"
        else
            echo "Invalid input. Please enter MSI or SPN."
        fi

        if [[ $enable_aad_rbac == [Yy] ]]; then
            enable_aad_rbac="--enable-aad --enable-azure-rbac"
        elif [[ $enable_aad_rbac == [Nn] ]]; then
            enable_aad_rbac=""
        else
            echo "Invalid input."
        fi

        echo -e "
        +-------------------------------------------------------------------------+
        |${MAGENTA}AKS Creating${ENDCOLOR}
        +-------------------------------------------------------------------------+
        "  
        az aks create --resource-group $resource_group --name $cluster_name --location $location --node-count $node_count --network-plugin $network_plugin --tier $tier --os-sku $os_sku --node-vm-size $node_vm_size $msi_or_spn $enable_aad_rbac
        echo -e "
        +-------------------------------------------------------------------------+
        |${GREEN}AKS Created${ENDCOLOR}
        |Resource Group: $resource_group || Cluster Name: $cluster_name
        +-------------------------------------------------------------------------+
        |$(aks_get_url)
        +-------------------------------------------------------------------------+
        "  
        az aks get-credentials --resource-group $resource_group --name $cluster_name --overwrite-existing
        ;;
    4)
        az_aks_delete
        ;;
    5)
        az_aks_reset_spn_credentials
        ;;
    6)
        az_aks_rotate_certs
        ;;
    7)
        az_aks_update_upgrade
        ;;
    8)
        aks_enable_disable_addon
        ;;
    9)
        az_enable_disable_csi_drivers
        ;;
    10)
        aks_version_list_location
        ;;
    11)
        az_aks_debug_node
        ;;
    *)
        echo "Invalid choice. Please select 1, 2, 3..."
        ;;
    esac
}

function az_aks_delete() {
    # Delete AKS cluster
    echo "Enter Resource Group:"
    read resource_group
    echo "Enter Cluster Name:"
    read cluster_name

    echo -e "
    +-------------------------------------------------------------------------+
    |${RED}Deleting AKS${ENDCOLOR}
    +-------------------------------------------------------------------------+
    "
    az aks delete --resource-group $resource_group --name $cluster_name
}

function check_cluster_status() {
    # Check if cluster is: Stopped, Faieled, Succeeded, K8S Version
    k8s_version=$(az aks show --resource-group $resource_group --name $cluster_name --query currentKubernetesVersion -o tsv)
    power_state=$(az aks show --resource-group $resource_group --name $cluster_name  --query powerState -o tsv)
    provisioning_state=$(az aks show --resource-group $resource_group --name $cluster_name --query provisioningState -o tsv)
    echo "Cluster Status: $k8s_version
    |Power State: $power_state
    |Provisioning State: $provisioning_state"
}

function check_credentials_status() {
    # Check cluster credentials
    credentials_status=$(az aks show --resource-group $resource_group --name $cluster_name --query servicePrincipalProfile.clientId -o tsv)
    credentials_endtime=$(az ad app credential list --id $credentials_status --query "[].endDateTime" -o tsv)
    echo "$credentials_status"
    echo "$credentials_list"
}

function az_aks_reset_spn_credentials() {
    echo "Enter Resource Group:"
    read resource_group
    echo "Enter Cluster Name:"
    read cluster_name

    echo -e "
    +---------------------------------------------+
    |${RED}Status: Updating Service Principal Name (SPN)${ENDCOLOR}|
    +---------------------------------------------+
    "

    # Reset Service Princial Credentials (SPN)
    SP_ID=$(az aks show --resource-group $resource_group --name $cluster_name --query servicePrincipalProfile.clientId -o tsv)
    SP_SECRET=$(az ad app credential reset --id "$SP_ID" --query password -o tsv)
    SP_UPDATE=$(az aks update-credentials --resource-group $resource_group --name $cluster_name --reset-service-principal --service-principal "$SP_ID" --client-secret "${SP_SECRET}")
    eval $SP_UPDATE

    keyId=$(az ad app credential list --id $SP_ID --query [].keyId -o tsv)

    echo -e "
    +--------------------------------------------+
    |${GREEN}Status: Service Principal Name (SPN) Updated${ENDCOLOR}|
    +---------------------------------------------------------+
    |App Registrations: $SP_ID  |
    |Secret Password $SP_SECRET |
    |Secret ID: $keyId          |
    +---------------------------------------------------------+
    "
}

function check_pdb() {
    # Check if the AKS cluster has a PDB
    echo -e "Microsoft Official documentation:
    'https://learn.microsoft.com/en-us/troubleshoot/azure/azure-kubernetes/error-code-poddrainfailure#symptoms'
    "
    pdbCount=$(kubectl get pdb --all-namespaces | wc -l)
    pdbCount2=$(kubectl get pdb --all-namespaces | grep "0")
    command="kubectl get pdb --all-namespaces"
    pattern="0"
    output=$($command | grep "$pattern")

    if echo "$output" | grep -q "0"; then
        echo -e "
        AKS cluster has $pdbCount PDBs and PDB:
        |${RED}$pdbCount2${ENDCOLOR}|
        is not allowing for disruption, 
        warning: this may not allow the node to be drained and therefore blocking an upgrade process.
        "
    else
        echo -e "${GREEN}|The AKS cluster does not have a Pod Disruption Budget.${ENDCOLOR}|"
    fi
}

function backup_pdb() {
    # Set your output file name here
    OUTPUT_FILE="pdb_backup.yaml"

    # Get all PDBs in all namespaces
    kubectl get pdb --all-namespaces -o json > $OUTPUT_FILE
    echo "All PDBs have been backed up to $OUTPUT_FILE."
}

function check_memory_pressure() {
    # Check for memory pressure
    MEMORY_PRESSURE=$(kubectl describe nodes | grep "MemoryPressure")
    if [[ $MEMORY_PRESSURE == *"True"* ]]; then
        echo -e "${RED}|The cluster has memory pressure${ENDCOLOR}|"
    else
        echo -e "${GREEN}|The cluster DOES NOT have memory pressure${ENDCOLOR}|"
    fi
}

function check_disk_pid_status() {
    # Check for PID pressure
    PID_PRESSURE=$(kubectl describe nodes | grep "PIDPressure")
    if [[ $PID_PRESSURE == *"True"* ]]; then
        echo -e "${RED}|The cluster has PID pressure${ENDCOLOR}|"
    else
        echo -e "${GREEN}|The cluster DOES NOT have PID pressure${ENDCOLOR}|"
    fi
}

function check_disk_pressure_status() {
    # Check for disk pressure
    DISK_PRESSURE=$(kubectl describe nodes | grep "DiskPressure")
    if [[ $DISK_PRESSURE == *"True"* ]]; then
        echo -e "${RED}|The cluster has disk pressure${ENDCOLOR}|"
    else
        echo -e "${GREEN}|The cluster DOES NOT have disk pressure${ENDCOLOR}|"
    fi
}

function check_acr_connection() {
    # Check ACR connection issues
    az acr list -o table
    echo "Enter ACR Name"
    read acr_link
    acr_token=$(az account get-access-token -o tsv --query=accessToken)
    curl -H "Authorization: Bearer $acr_token"  https://$acr_link.azurecr.io/oauth2/exchange
}

function aks_get_url() {
    # Get AKS URL Azure Portal
    aks_azure_link=$(az aks browse --resource-group $resource_group --name $cluster_name)
    echo "Microsoft Official documentation: 
    |'https://learn.microsoft.com/pt-pt/cli/azure/aks?view=azure-cli-latest#az-aks-browse'
    +-------------------------------------------------------------------------+
    |Go to Azure Portal to start your AKS:
    |$aks_azure_link
    "
}

function aks_get_top_nodes() {
    # Get top nodes by memory
    kubectl top nodes --sort-by=memory
}

function aks_get_top_pods() {
    # Get top pods by memory
    kubectl top pods --sort-by=memory -A
}

function aks_describe_nodes() {
    # Describe nodes
    echo ""
}

function aks_check_top() {
    # Get Pod, Node Logs
    kubectl top nodes --sort-by=memory
    kubectl top pods --sort-by=memory -A
    folderlogs=aks-top-logs
    mkdir $folderlogs
    kubectl top nodes --sort-by=memory > $folderlogs/topNodes.txt
    kubectl top pods --sort-by=memory -A > $folderlogs/topPods.txt
    zip -r aks-top-logs.zip $folderlogs
    echo "Logs has been saved in $folderlogs and zip file: aks-top-logs.zip"

}

function aks_tcpdump() {
    # Get tcpdump
    echo -e "Documentation
    'https://github.com/josecaneira/aks-lab/tree/main/tcpdump_daemonset'
    "

    echo -e "
    +-------------------------------------------------------------------------+
    |A PV/PVC file share will be created on the AKS cluster default storage account 
    |that then can be browsed on your cluster managed Resource Group "MC_" using Azure Portal. 
    |If no default storage account exists a new one will be created, 
    |please remember to delete it after it no longer being required.
    |
    +-------------------------------------------------------------------------+"
    kubectl apply -f https://github.com/josecaneira/aks-lab/raw/main/tcpdump_daemonset/tcpdump_ds.yaml
    kubectl get pv|grep tcpdump

}

function aks_get_syslog() {
    # Get SysLog
    kubectl get nodes
    echo "Enter node name"
    read node_name
    kubectl debug node/$node_name --image=nginx
	kubectl get pods
    echo "Enter pods name"
    read pod_name
	kubectl cp $pod_name:/host/var/log/ /tmp/log
	zip -r syslog.zip /tmp/log
    echo "Logs has been saved in syslog.zip in the current folder"

}

function aks_get_configmap() {
    # Get Configmap
    kubectl get configmap -A
}

function az_aks_information() {
    # AKS Information
    echo "1. Check Policies"
    echo "Enter your option:"
    read option

    case $option in
        1)
            echo "1. Check Policies by Resource Group"
            echo "2. Check Policies by Subscription"
            echo "Enter your option:"
            read option
            if [[ $option == "1" ]]; then
                echo "Enter Resource Group:"
                read resource_group
                az policy assignment list --resource-group $resource_group
            elif [[ $option == "2" ]]; then
                echo "Enter Subscription:"
                read subscription_id
                az policy assignment list --subscription $subscription_id
            else
                echo "Invalid option"
            fi
            ;;
        *)
            echo "Invalid choice."
            ;;
    esac
    #az aks show --resource-group $resource_group --name $cluster_name --query linuxProfile.adminUsername -o tsv
    #az aks show --resource-group $resource_group --name $cluster_name --query linuxProfile.ssh.publicKeys[0].keyData -o tsv
    #az aks show --resource-group $resource_group --name $cluster_name --query location -o tsv
    #az aks show --resource-group $resource_group --name $cluster_name --query sku.tier -o tsv
    #az aks show --resource-group $resource_group --name $cluster_name --query nodeProvisioningProfile -o tsv
}

function aks_nodepool_information() {
    # Nodepoool information
    echo -e "Microsoft Official Documentation: 
    'https://learn.microsoft.com/en-US/cli/azure/aks/nodepool?view=azure-cli-latest#az_aks_nodepool_list'
    "
    az aks nodepool list $resource_group --name $cluster_name -o wide
}

function az_aks_update_upgrade() {
    # Update OR Upgrade
    echo "1. Check for available node image upgrades"
    echo "2. Upgrade all node images in all node pools"
    echo "3. Upgrade a specific node pool"
    echo "4. Upgrade AKS Kubernetes Version"
    echo "5. Upgrade Nodepool Kubernetes Version"
    echo "Enter your option:"
    read option

    case $option in
    1)
        echo -e "Microsoft Official Documentation: 
        'https://learn.microsoft.com/en-us/azure/aks/node-image-upgrade'
        "
        echo "Enter Resource Group:"
        read resource_group
        echo "Enter Cluster Name:"
        read cluster_name
        echo "Enter your Nodepool Name"
        read nodepool_name

        echo "Current Version:"
        az aks nodepool show --resource-group $resource_group --name $cluster_name --name $nodepool_name --query nodeImageVersion
        echo "Available upgrades:"
        az aks nodepool get-upgrades --resource-group $resource_group --name $cluster_name --name $nodepool_name
        ;;
    2)
        echo -e "Microsoft Official Documentation: 
        'https://learn.microsoft.com/en-us/azure/aks/node-image-upgrade#upgrade-all-node-images-in-all-node-pools'
        "
        echo "Upgrade all node images in all node pools"
        echo "Enter Resource Group:"
        read resource_group
        echo "Enter Cluster Name:"
        read cluster_name
        az aks upgrade --resource-group $resource_group --name $cluster_name --node-image-only
        ;;
    3)
        echo -e "Microsoft Official Documentation: 
        'https://learn.microsoft.com/en-us/azure/aks/node-image-upgrade#upgrade-a-specific-node-pool'
        "
        echo "Upgrade a specific node pool"
        echo "Enter Resource Group:"
        read resource_group
        echo "Enter Cluster Name:"
        read cluster_name
        echo "Enter your Nodepool Name"
        read nodepool_name
        az aks nodepool upgrade --resource-group $resource_group --name $cluster_name --name $nodepool_name --node-image-only
        ;;
    4)
        echo "Enter Resource Group:"
        read resource_group
        echo "Enter Cluster Name:"
        read cluster_name
        echo "Enter your desired Kubernetes Version | Ex: 1.27.9, 1.28.3, 1.28.5"
        read k8s_version
        az aks upgrade --resource-group $resource_group --name $cluster_name --kubernetes-version $k8s_version
        ;;
    5)
        echo "Enter Resource Group:"
        read resource_group
        echo "Enter Cluster Name:"
        read cluster_name
        echo "Enter your Nodepool Name"
        read nodepool_name
        echo "Enter your desired Kubernetes Version | Ex: 1.27.9, 1.28.3, 1.28.5"
        read k8s_version
        az aks nodepool upgrade --resource-group $resource_group --cluster-name $cluster_name --name $nodepool_name --kubernetes-version $k8s_version
        ;;
    *)
        echo "Invalid choice. Please select 1 or 2."
        ;;

    esac
}

function aks_version_list_location() {
    # List AKS version by location
    echo -e "AKS Kubernetes release calendar
    'https://learn.microsoft.com/en-us/azure/aks/supported-kubernetes-versions?tabs=azure-cli#aks-kubernetes-release-calendar'

    +-----------------------------------------------------------------------------------------------------------------------+
    |K8s version        Upstream release        AKS preview         AKS GA        End of life               Platform support|
    +-----------------------------------------------------------------------------------------------------------------------+
    |1.26               Dec 2022                Feb 2023            Apr 2023      Mar 2024                   Until 1.30 GA  |
    |-----------------------------------------------------------------------------------------------------------------------+
    |1.27*              Apr 2023                Jun 2023            Jul 2023      Jul 2024, LTS until 2025   Until 1.31 GA  |
    |-----------------------------------------------------------------------------------------------------------------------+
    |1.28               Aug 2023                Sep 2023            Nov 2023      Nov 2024                   Until 1.32 GA  |
    |-----------------------------------------------------------------------------------------------------------------------+
    |1.29               Dec 2023                Feb 2024            Mar 2024                                 Until 1.33 GA  |
    |-----------------------------------------------------------------------------------------------------------------------+
    |1.30               Apr 2024                May 2024            Jun 2024                                 Until 1.34 GA  |
    |-----------------------------------------------------------------------------------------------------------------------+
    ${RED}*Indicates the version is designated for Long Term Support${ENDCOLOR}
    "
    az account list-locations -o table
    echo "Enter location"
    read location
    az aks get-versions --location $location --output table
}

function aks_get_pv_pvc() {
    # List all PV and PVC
    kubectl get pv
    kubectl get pvc
}

function aks_enable_disable_addon() {
    # AKS Enable or Disable Addons
    echo -e "az aks addon
    'https://learn.microsoft.com/en-us/cli/azure/aks/addon?view=azure-cli-latest#az-aks-addon-list'
    "
    echo "1. Enable or Disable AKS Backup Extension"
    echo "2. Enable or Disable Monitoring logs"
    echo "3. Enable or Disable open-service-mesh addon"
    echo "Enter your option:"
    read option

    pause_function() {
    read -p "Press Enter to continue the installation..."
    }

    case $option in
    1)
        echo "Enable AKS Backup Extension"
        echo -e "Microsoft Official Documentation: 
        'https://learn.microsoft.com/en-us/azure/backup/azure-kubernetes-service-cluster-manage-backups'
        "
        echo "Choose Option: (1 = Enable / 2 = Disable / 3 = Troubleshoot)"
        read addons_option

        if [[ "$addons_option" == "1" ]]; then
        azurepolicy_check=$(kubectl get events -A | grep "azurepolicy-k8sazurev2containerallowedimag")
            if [[ $azurepolicy_check == *"azurepolicy-k8sazurev2containerallowedimag"* ]]; then
            echo -e "
            +-------------------------------------------------------------------------+
            |${RED}The policy:azurepolicy-k8sazurev2containerallowedimag
            |is affecting the AKS Backup Addon Installation${ENDCOLOR}
            +-------------------------------------------------------------------------+
            "
            fi
            echo "Enable AKS Backup Extension"
            echo "Enter Resource Group:"
            read resource_group
            echo "Enter Cluster Name:"
            read cluster_name
            echo "Storage Account Name"
            read storageaccount_name
            echo "Blob Container Name"
            read blobcontainer_name
            echo "Storage Account Resource Group Name"
            read storageaccount_resource_group_name
            echo "Storage Account Subscription Id"
            read storageaccountsubscriptionid
            echo -e "
            +-------------------------------------------------------------------------+
            |${MAGENTA}Enabling AKS Backup Extension${ENDCOLOR}
            +-------------------------------------------------------------------------+
            "
            echo -e " ${YELLOW}
            The registration may take up to 10 minutes. To monitor the registration process, wait the status to show:
            Registered.${ENDCOLOR}"
            kubectl config set-context --current --namespace=default
            az provider register --namespace Microsoft.KubernetesConfiguration
            watch -g az provider show -n Microsoft.KubernetesConfiguration -o table
            pause_function
            az extension add --name aks-preview
            az extension update --name aks-preview
            echo -e "It takes a few minutes for the status to show Registered."
            az feature register --namespace "Microsoft.ContainerService" --name "TrustedAccessPreview"
            watch -g az feature show --namespace "Microsoft.ContainerService" --name "TrustedAccessPreview"
            pause_function
            az provider register --namespace Microsoft.ContainerService
            az k8s-extension create --name azure-aks-backup --extension-type microsoft.dataprotection.kubernetes --scope cluster --cluster-type managedClusters --cluster-name $cluster_name --resource-group $resource_group --release-train stable --configuration-settings blobContainer=$blobcontainer_name storageAccount=$storageaccount_name storageAccountResourceGroup=$storageaccount_resource_group_name storageAccountSubscriptionId=$storageaccountsubscriptionid
        elif [[ "$addons_option" == "2" ]]; then
            echo "Disable AKS Backup Extension"
            echo "Disable AKS Backup Extension"
            echo "Enter Resource Group:"
            read resource_group
            echo "Enter Cluster Name:"
            read cluster_name

            echo -e "
            +-------------------------------------------------------------------------+
            |${RED}Disabling AKS Backup Extension${ENDCOLOR}
            +-------------------------------------------------------------------------+
            "
            az k8s-extension delete --resource-group $resource_group --cluster-name $cluster_name --cluster-type managedClusters --name azure-aks-backup
        elif [[ "$addons_option" == "3" ]]; then
        echo  -e "
        Troubleshoot Azure Kubernetes Service backup and restore
        Microsoft Official Documentation:
        'https://learn.microsoft.com/en-us/azure/backup/azure-kubernetes-service-backup-troubleshoot'

        Scenario 1
        Error message:
        ${RED}{Helm installation from path [] for release [azure-aks-backup] failed with the following error: err [release azure-aks-backup failed, and has been uninstalled due to atomic being set: failed post-install: timed out waiting for the condition]} occurred while doing the operation: {Installing the extension} on the config${ENDCOLOR}
        
        Cause: The extension has been installed successfully, but the pods aren't spawning. 
        This happens because the required compute and memory aren't available for the pods.

        Resolution: To resolve the issue, increase the number of nodes in the cluster. 
        This allows sufficient compute and memory to be available for the pods to spawn. 
        To scale node pool on Azure portal, follow these steps:
            ${GREEN}
            1.On the Azure portal, open the AKS cluster.
            2.Go to Node pools under Settings.
            3.Select Scale node pool, and then update the minimum and maximum values on the Node count range.
            4.Select Apply.
            5.AKS Backup Extension installation error resolutions
            ${ENDCOLOR}

        ---
        Scenario 4
        Error message:
        ${RED}dataprotection-microsoft 1s Warning FailedCreate job/dataprotection-microsoft-kubernetes-agent-upgrade-crds Error creating: admission webhook "validation.gatekeeper.sh"
        denied the request: [azurepolicy-k8sazurev2containerallowedimag-xxxxxxxxxxxxxxxxxxxx] 
        Container image mcr.microsoft.com/azurebackup/k8s/velero:0.0.02574.247 for container velero has not been allowed....
        ${ENDCOLOR}

        Solution 1:
        Include “dataprotection-microsoft” into namespace exclusions:

        ["dataprotection-microsoft","kube-system","gatekeeper-system","azure-arc","azure-extensions-usage-system"]

        Go to: Home > Policy > Assignments > "FIND THE POLICY"

        ---

        Solution 2: Edit policy in Azure Portal.

        Go to: Home > Policy > Assignments > Kubernetes cluster containers should only use allowed images
        change to allow in: Parameters
        This policy can be found in:
        'https://learn.microsoft.com/en-us/azure/aks/policy-reference'

        1. To check logs of the *ExtensionAgent* pod, run the following command:
        kubectl get events -A
        "
        else
            echo "Incorret Option"
        fi
        ;;
    2)
        echo "Enable or Disable Monitoring logs"
        echo -e "Microsoft Official Documentation:
        'https://learn.microsoft.com/en-us/azure/azure-monitor/containers/kubernetes-monitoring-enable'
        'https://learn.microsoft.com/en-us/azure/azure-monitor/containers/kubernetes-monitoring-disable'
        "
        echo "Choose Option: (1 = Enable / 2 = Disable)"
        read addons_option
        echo "Enter Resource Group:"
        read resource_group
        echo "Enter Cluster Name:"
        read cluster_name

        if [[ "$addons_option" == "1" ]]; then
            echo -e "
            +-------------------------------------------------------------------------+
            |${MAGENTA}Enabling AKS Monitoring Logs${ENDCOLOR}
            +-------------------------------------------------------------------------+
            "
            az aks enable-addons -a monitoring --resource-group $resource_group --name $cluster_name
        elif [[ "$addons_option" == "2" ]]; then
            echo -e "
            +-------------------------------------------------------------------------+
            |${RED}Disabling AKS Monitoring Logs${ENDCOLOR}
            +-------------------------------------------------------------------------+
            "
            az aks disable-addons -a monitoring --resource-group $resource_group --name $cluster_name
        else
            echo "Incorret Option"
        fi
        ;;
    3)
        echo "Enable or Disable open-service-mesh addon"
        echo -e "Microsoft Official documentation: 
        'https://learn.microsoft.com/en-us/cli/azure/aks?view=azure-cli-latest#az-aks-enable-addons(aks-preview)'
        "
        echo "Choose Option: (1 = Enable / 2 = Disable)"
        read addons_option
        echo "Enter Resource Group:"
        read resource_group
        echo "Enter Cluster Name:"
        read cluster_name
        if [[ "$addons_option" == "1" ]]; then
            echo -e "
            +-------------------------------------------------------------------------+
            |${MAGENTA}Enabling AKS open-service-mesh addon${ENDCOLOR}
            +-------------------------------------------------------------------------+
            "
            az aks enable-addons --resource-group $resource_group --name $cluster_name --addons open-service-mesh
        elif [[ "$addons_option" == "2" ]]; then
            echo -e "
            +-------------------------------------------------------------------------+
            |${RED}Disabling AKS open-service-mesh addon${ENDCOLOR}
            +-------------------------------------------------------------------------+
            "
            az aks disable-addons --resource-group $resource_group --name $cluster_name --addons open-service-mesh
        else
            echo "Incorret Option"
        fi
        ;;
    *)
        echo "Invalid choice. Please select 1 or 2."
        ;;
    esac
}

function az_cli_tools(){
    # Az Cli Tools
    echo "1. Install az-cli"
    echo "2. Install kubectl"
    echo "3. Install helm"
    read option
    case $option in
    1)
        echo -e "Microsoft Official Documentation: 
        'https://learn.microsoft.com/en-us/cli/azure/install-azure-cli-linux?pivots=apt'
        "
        echo -e "
        +-------------------------------------------------------------------------+
        |${MAGENTA}Installing az-cli${ENDCOLOR}
        +-------------------------------------------------------------------------+
        "
        curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
        echo -e "
        +-------------------------------------------------------------------------+
        |${GREEN}az-cli Installed${ENDCOLOR}
        +-------------------------------------------------------------------------+
        "
        ;;
    2)
        echo -e "Microsoft Official Documentation: 
        'https://learn.microsoft.com/en-us/cli/azure/aks?view=azure-cli-latest#az-aks-install-cli'
        "
        echo -e "
        +-------------------------------------------------------------------------+
        |${MAGENTA}Installing kubectl${ENDCOLOR}
        +-------------------------------------------------------------------------+
        "
        az aks install-cli
        echo -e "
        +-------------------------------------------------------------------------+
        |${GREEN}kubectl Installed${ENDCOLOR}
        +-------------------------------------------------------------------------+
        "
        ;;
    3)
        echo -e "Helm Official Documentation: 
        'https://helm.sh/docs/intro/install/'
        'https://github.com/helm/helm/releases'
        "
        echo "Install helm"
        echo -e "
        +-------------------------------------------------------------------------+
        |${MAGENTA}Installing helm${ENDCOLOR}
        +-------------------------------------------------------------------------+
        "
        wget https://get.helm.sh/helm-v3.14.3-linux-amd64.tar.gz
        tar -zxvf helm-v3.14.3-linux-amd64.tar.gz
        sudo mv linux-amd64/helm /usr/local/bin/helm
        echo -e "
        +-------------------------------------------------------------------------+
        |${GREEN}helm Installed${ENDCOLOR}
        +-------------------------------------------------------------------------+
        "
        ;;
    *)
         echo "Invalid choice. Please select 1, 2 or 3."
        ;;
    esac
}

function az_vm_run_command() {
    # Run command on vm
    echo "1. Run command on vm"
    echo "Enter your option:"
    read option
    echo -e "
    Microsoft Official Documentation: 
    'https://learn.microsoft.com/en-us/azure/virtual-machines/linux/run-command'
    "
    case $option in
    1)
        echo "Run command"
        echo "Enter Resource Group:"
        read resource_group
        echo "Enter VM Name:"
        read vm_name
        echo -e "Enter your command, Ex: apt-get update && apt-get install -y nginx
        To run commands as a different user, enter sudo -u to specify a user account.
        "
        read vm_command
        az vm run-command invoke --resource-group $resource_group --name $vm_name --command-id RunShellScript --scripts "$vm_command"
        ;;
    *)
        echo "Invalid choice"
        ;;
    esac
}

function az_vmss() {
    echo "1. vmss delete-instances"
    echo "2. vmss deallocate"
    echo "3. vmss view instances"
    echo "4. vmss list"
    echo "5. vmss list-instance-connection-info"
    echo "6. vmss list-instance-public-ips"
    echo "7. vmss list-skus"
    echo "8. vmss perform-maintenance"
    echo "9. vmss reimage"
    echo "Enter your option:"
    read option
    echo -e "
    Microsoft Official Documentation: 
    'https://learn.microsoft.com/en-us/cli/azure/vmss?view=azure-cli-latest#commands'
    "
    case $option in
    1)
        echo "Az vmss delete-instances"
        echo "Enter MC_Resource Group:"
        read resource_group
        echo "Enter Cluster Name:"
        read cluster_name
        echo "Enter VMSS ScaleSet Name"
        read vmss_scaleset
        echo "Enter VMSS ID"
        read vmss_id
        az vmss delete-instances --instance-ids $vmss_id --name $vmss_scaleset --resource-group $resource_group --no-wait
        ;;
    2)
        echo "Az vmss deallocate"
        echo "Enter MC_Resource Group:"
        read resource_group
        echo "Enter Cluster Name:"
        read cluster_name
        echo "Enter VMSS ScaleSet Name"
        read vmss_scaleset
        echo "Enter VMSS ID"
        read vmss_id
        az vmss deallocate --instance-ids $vmss_id --name $vmss_scaleset --resource-group $resource_group
        ;;
    3)
        echo "Az vmss view instances"
        echo "Enter MC_Resource Group:"
        read resource_group
        echo "Enter VMSS ScaleSet Name"
        read vmss_scaleset
        az vmss get-instance-view --name $vmss_scaleset --resource-group $resource_group
        ;;
    4)
        echo "Az vmss list"
        echo "Enter MC_Resource Group:"
        read resource_group
        az vmss list --resource-group $resource_group
        ;;
    5)
        echo "Az vmss list-instance-connection-info"
        echo "Enter MC_Resource Group:"
        read resource_group
        echo "Enter VMSS ScaleSet Name"
        read vmss_scaleset
        az vmss list-instance-connection-info --name $vmss_scaleset --resource-group $resource_group
        ;;
    6)
        echo "Az vmss list-instance-public-ips"
        echo "Enter MC_Resource Group:"
        read resource_group
        echo "Enter VMSS ScaleSet Name"
        read vmss_scaleset
        az vmss list-instance-public-ips --name $vmss_scaleset --resource-group $resource_group
        ;;
    7)
        echo "Az vmss list-skus"
        echo "Enter MC_Resource Group:"
        read resource_group
        echo "Enter VMSS ScaleSet Name"
        read vmss_scaleset
        az vmss list-skus --name $vmss_scaleset --resource-group $resource_group
        ;;
    8)
        echo "Az vmss perform-maintenance"
        echo "Under deployment"
        #echo "Enter MC_Resource Group:"
        #read resource_group
        #echo "Enter VMSS ScaleSet Name"
        #read vmss_scaleset
        #echo "Enter VMSS ID"
        #read vmss_id
        #az vmss perform-maintenance --name $vmss_scaleset --instance-ids $vmss_id --ids --resource-group $resource_group                 
        ;;
    9)
        echo "Az vmss reimage"
        echo "Enter MC_Resource Group:"
        read resource_group
        echo "Enter VMSS ScaleSet Name"
        read vmss_scaleset
        echo "Enter VMSS ID, Ex: 1 or 1 2 3"
        read vmss_id
        echo "Enter Subscription"
        read subscription
        az vmss reimage --name $vmss_scaleset --instance-ids $vmss_id --resource-group $resource_group --subscription $subscription
        #Reimage all the VM instances within a VMSS.
        #az vmss reimage --name MyScaleSet --resource-group MyResourceGroup --subscription MySubscription
        ;;
    10)
        echo "Az vmss restart"
        echo -e "Microsoft Official Documentation:
        'https://learn.microsoft.com/en-us/cli/azure/vmss?view=azure-cli-latest#az-vmss-restart'
        "
        echo "Enter MC_Resource Group:"
        read resource_group
        echo "Enter VMSS ScaleSet Name"
        read vmss_scaleset
        echo "Enter VMSS ID, Ex: 1 or 1 2 3"
        read vmss_id
        az vmss restart --instance-ids $vmss_id --name $vmss_scaleset --resource-group $resource_group
        ;;
    11)
        echo "Az vmss scale"
        echo -e "Microsoft Official Documentation:
        'https://learn.microsoft.com/en-us/cli/azure/vmss?view=azure-cli-latest#az-vmss-scale'
        "
        echo "Enter MC_Resource Group:"
        read resource_group
        echo "Enter VMSS ScaleSet Name"
        read vmss_scaleset
        echo "Enter number to Scale, Ex: 2, 4, 6..."
        read new_capacity
        az vmss scale --name $vmss_scaleset --new-capacity $new_capacity --resource-group $resource_group
        ;;
    12)
        echo "az vmss set-orchestration-service-state"
        echo "Under deployment"
        #az vmss set-orchestration-service-state --service-name AutomaticRepairs --action Resume --name MyScaleSet --resource-group MyResourceGroup
        ;;
    13)
        echo "Az vmss show"
        echo -e "Microsoft Official Documentation:
        'https://learn.microsoft.com/en-us/cli/azure/vmss?view=azure-cli-latest#az-vmss-show'
        "
        echo "Enter MC_Resource Group:"
        read resource_group
        echo "Enter VMSS ScaleSet Name"
        read vmss_scaleset
        az vmss show --name $vmss_scaleset --resource-group $resource_group
        ;;
    14)
        echo "az vmss simulate-eviction"
        echo "Under deployment"
        #az vmss simulate-eviction --resource-group MyResourceGroup --name MyScaleSet --instance-id 0
        ;;
    15)
        echo "Az vmss start"
        echo -e "Microsoft Official Documentation:
        'https://learn.microsoft.com/en-us/cli/azure/vmss?view=azure-cli-latest#az-vmss-start'
        "
        echo "Enter MC_Resource Group:"
        read resource_group
        echo "Enter VMSS ScaleSet Name"
        read vmss_scaleset
        echo "Enter VMSS ID, Ex: 1 or 1 2 3"
        read vmss_id
        az vmss start --instance-ids $vmss_id --name $vmss_scaleset --resource-group $resource_group
        ;;
    16)
        echo "Az vmss stop"
        echo -e "Microsoft Official Documentation:
        'https://learn.microsoft.com/en-us/cli/azure/vmss?view=azure-cli-latest#az-vmss-stop'
        "
        echo "Enter MC_Resource Group:"
        read resource_group
        echo "Enter VMSS ScaleSet Name"
        read vmss_scaleset
        echo "Enter VMSS ID, Ex: 1 or 1 2 3"
        read vmss_id
        az vmss stop --instance-ids $vmss_id --name $vmss_scaleset --resource-group $resource_group
        #Power off VMs within a VMSS without shutting down.
        #az vmss stop --name MyScaleSet --resource-group MyResourceGroup --skip-shutdown
        ;;
    17)
        echo "Az vmss update"
        echo "Under deployment"
        echo -e "Microsoft Official Documentation:
        'https://learn.microsoft.com/en-us/cli/azure/vmss?view=azure-cli-latest#az-vmss-update'
        "
        ;;
    18)
        echo "Az vmss update-domain-walk"
        echo "Under deployment"
        echo -e "Microsoft Official Documentation:
        'https://learn.microsoft.com/en-us/cli/azure/vmss?view=azure-cli-latest#az-vmss-update-domain-walk'
        "
        ;;
    19)
        echo "Az vmss update-instances"
        echo -e "Microsoft Official Documentation:
        'https://learn.microsoft.com/en-us/cli/azure/vmss?view=azure-cli-latest#az-vmss-update-instances'
        "
        echo "Enter MC_Resource Group:"
        read resource_group
        echo "Enter VMSS ScaleSet Name"
        read vmss_scaleset
        echo "Enter VMSS ID, Ex: 1 or 1 2 3"
        read vmss_id
        az vmss update-instances --instance-ids $vmss_id --name $vmss_scaleset --resource-group $resource_group
        ;;
    20)
        echo "Az vmss wait"
        echo -e "Microsoft Official Documentation:
        'https://learn.microsoft.com/en-us/cli/azure/vmss?view=azure-cli-latest#az-vmss-wait'
        "
        echo "Enter MC_Resource Group:"
        read resource_group
        echo "Enter VMSS ScaleSet Name"
        read vmss_scaleset
        az vmss wait --updated --name $vmss_scaleset --resource-group $resource_group
        #Place the CLI in a waiting state until the VMSS has been updated
        #az vmss wait --updated --name MyScaleSet --resource-group MyResourceGroup
        #---
        #Place the CLI in a waiting state until the VMSS instance has been updated.
        #az vmss wait --updated --instance-id 1 --name MyScaleSet --resource-group MyResourceGroup
        #---
        #Place the CLI in a waiting state until a condition of a scale set is met. (autogenerated)
        #az vmss wait --created --name MyScaleSet --resource-group MyResourceGroup
        ;;
    *)
         echo "Invalid choice!"
        ;;
    esac
}

function az_aks_addon_check() {
    # Check AKS Addons Installed
    az_aks_addon_check_cmd=$(az aks addon list --resource-group $resource_group --name $cluster_name -o table)
    echo "$az_aks_addon_check_cmd"
}

function az_aks_rotate_certs() {
    # Manually rotate your cluster certificates
    echo -e "
    Microsoft Official Documentation: 
    'https://learn.microsoft.com/en-us/azure/aks/certificate-rotation#manually-rotate-your-cluster-certificates'
    "
    echo "Enter Resource Group:"
    read resource_group
    echo "Enter Cluster Name:"
    read cluster_name
    echo -e "
    +-------------------------------------------------------------------------+
    |${MAGENTA}Rotating your cluster certificates${ENDCOLOR}
    |Resource Group: $resource_group || Cluster Name: $cluster_name
    +--------------------------------------------------------------------------------------------------------+
    |${YELLOW}Warning${ENDCOLOR}
    |   ${YELLOW}Rotating your certificates using az aks rotate-certs recreates all of your nodes,${ENDCOLOR}
    |   ${YELLOW}Virtual Machine Scale Sets and Disks and can cause up to 30 minutes of downtime for your AKS cluster.${ENDCOLOR}
    +--------------------------------------------------------------------------------------------------------+
    "
    az aks rotate-certs --resource-group $resource_group --name $cluster_name

    echo "Enter MC_Resource Group:"
    read resource_group
    echo "Enter VMSS ScaleSet Name"
    read vmss_scaleset
    echo -e "
    +--------------------------------------------------------------------------------------------------------+
    |${MAGENTA}Checking Virtual Machine Scale Set agent node certificate expiration date${ENDCOLOR}
    |Resource Group: $mc_resource_group || Cluster Name: $cluster_name
    +--------------------------------------------------------------------------------------------------------+
    "
    az vmss run-command invoke --resource-group $resource_group --name $vmss_scaleset --instance-id 0 --command-id RunShellScript --scripts "openssl x509 -enddate -noout -in /etc/kubernetes/certs/client.crt"
}

function az_enable_disable_csi_drivers() {
    echo -e "Enable CSI storage drivers on an existing cluster
    'https://learn.microsoft.com/en-us/azure/aks/csi-storage-drivers#enable-csi-storage-drivers-on-an-existing-cluster'
    "
    echo "1. Azure Disks CSI driver"
    echo "2. Azure Files CSI driver"
    echo "3. Azure Blob storage CSI driver"
    echo "4. snapshot controller"
    echo "Enter your option:"
    read option

    case $option in
        1)
            echo "Azure Disks CSI driver"
            echo "Choose Option: (1 = Enable / 2 = Disable / 3 = Troubleshoot)"
            read option
            echo "Enter Resource Group:"
            read resource_group
            echo "Enter Cluster Name:"
            read cluster_name
            if [[ $option == "1" ]]; then
                echo -e "
                +----------------------------------------------------------------------+
                |${MAGENTA}Enabling Azure Disks CSI driver${ENDCOLOR}
                |Resource Group: $resource_group || Cluster Name: $cluster_name
                +----------------------------------------------------------------------+
                "
                az aks update --resource-group $resource_group --name $cluster_name --enable-disk-driver
            elif [[ $option == "2" ]]; then
                echo -e "
                +----------------------------------------------------------------------+
                |${MAGENTA}Disabling Azure Disks CSI driver${ENDCOLOR}
                |Resource Group: $resource_group || Cluster Name: $cluster_name
                +----------------------------------------------------------------------+
                "
                az aks update --resource-group $resource_group --name $cluster_name --disable-disk-driver
            else
                echo "invalid choice."
            fi
            ;;
        2)
            echo "Azure Files CSI driver"
            echo "Choose Option: (1 = Enable / 2 = Disable / 3 = Troubleshoot)"
            read option
            echo "Enter Resource Group:"
            read resource_group
            echo "Enter Cluster Name:"
            read cluster_name
            if [[ $option == "1" ]]; then
                echo -e "
                +----------------------------------------------------------------------+
                |${MAGENTA}Enabling Azure Files CSI driver${ENDCOLOR}
                |Resource Group: $resource_group || Cluster Name: $cluster_name
                +----------------------------------------------------------------------+
                "
                az aks update --resource-group $resource_group --name $cluster_name --enable-file-driver
            elif [[ $option == "2" ]]; then
                echo -e "
                +----------------------------------------------------------------------+
                |${MAGENTA}Disabling Azure Files CSI driver${ENDCOLOR}
                |Resource Group: $resource_group || Cluster Name: $cluster_name
                +----------------------------------------------------------------------+
                "
                az aks update --resource-group $resource_group --name $cluster_name --disable-file-driver
            else
                echo "invalid choice."
            fi
            ;;
        3)
            echo "Azure Blob storage CSI driver"
            echo "Choose Option: (1 = Enable / 2 = Disable / 3 = Troubleshoot)"
            read option
            echo "Enter Resource Group:"
            read resource_group
            echo "Enter Cluster Name:"
            read cluster_name
            if [[ $option == "1" ]]; then
                echo -e "
                +----------------------------------------------------------------------+
                |${MAGENTA}Enabling Azure Blob storage CSI driver${ENDCOLOR}
                |Resource Group: $resource_group || Cluster Name: $cluster_name
                +----------------------------------------------------------------------+
                "
                az aks update --resource-group $resource_group --name $cluster_name --enable-blob-driver
            elif [[ $option == "2" ]]; then
                echo -e "
                +----------------------------------------------------------------------+
                |${MAGENTA}Disabling Azure Blob storage CSI driver${ENDCOLOR}
                |Resource Group: $resource_group || Cluster Name: $cluster_name
                +----------------------------------------------------------------------+
                "
                az aks update --resource-group $resource_group --name $cluster_name --disable-blob-driver
            else
                echo "invalid choice."
            fi
            ;;
        4)
            echo "snapshot controller"
            echo "Choose Option: (1 = Enable / 2 = Disable / 3 = Troubleshoot)"
            read option
            echo "Enter Resource Group:"
            read resource_group
            echo "Enter Cluster Name:"
            read cluster_name
            if [[ $option == "1" ]]; then
                echo -e "
                +----------------------------------------------------------------------+
                |${MAGENTA}Enabling snapshot controller${ENDCOLOR}
                |Resource Group: $resource_group || Cluster Name: $cluster_name
                +----------------------------------------------------------------------+
                "
                az aks update --resource-group $resource_group --name $cluster_name --enable-snapshot-controller
            elif [[ $option == "2" ]]; then
                echo -e "
                +----------------------------------------------------------------------+
                |${MAGENTA}Disabling snapshot controller${ENDCOLOR}
                |Resource Group: $resource_group || Cluster Name: $cluster_name
                +----------------------------------------------------------------------+
                "
                az aks update --resource-group $resource_group --name $cluster_name --disable-snapshot-controller
            else
                echo "invalid choice."
            fi
            ;;
        *)
            echo "Invalid choice"
            ;;
    esac
}

function az_aks_debug_node () {
    #
    echo -e "Microsoft Official Documentation:
    'https://learn.microsoft.com/en-us/azure/aks/node-access#ssh-using-kubectl-debug'
    "
    kubectl get nodes -o wide
    echo "Choose your node"
    read aks_node

    kubectl debug node/$aks_node -it --image=mcr.microsoft.com/cbl-mariner/busybox:2.0 && chroot /host
}

function cluster_analysis() {
    # AKS Cluster Analysis
    echo "Enter Resource Group:"
    read resource_group
    echo "Enter Cluster Name:"
    read cluster_name

    echo -e "
    +-----------------------+
    |${MAGENTA}Analysing Cluster...${ENDCOLOR}   |
    +-----------------------+
    "
    
function cluster_on_off() {
    power_state=$(az aks show --resource-group $resource_group --name $cluster_name --query powerState -o tsv)
    if [[ "$power_state" != "Stopped" ]]; then
    echo -e "
    +-------------------------------------------------------------------------+
    |${GREEN}AKS Analysis${ENDCOLOR}
    |Resource Group: $resource_group || Cluster Name: $cluster_name
    +-------------------------------------------------------------------------+
    |$(aks_get_url)
    +-------------------------------------------------------------------------+        
    |$(check_cluster_status)
    |$(check_memory_pressure)
    |$(check_disk_pressure_status)
    |$(check_disk_pid_status)
    +---------------------------------------------------------+
    |$(check_pdb)
    +---------------------------------------------------------+
    |NODES:
    |$(aks_get_top_nodes)
    +---------------------------------------------------------+
    |PODS:
    |$(aks_get_top_pods)
    +---------------------------------------------------------+
    |Configmap:
    |$(aks_get_configmap)
    +---------------------------------------------------------+
    |ADDONS:
    |$(az_aks_addon_check)
    "
    else
        echo -e "
    +-------------------------------------------------------------------------+
    |${GREEN}AKS Analysis${ENDCOLOR}
    |${RED}Start your cluster to analyze in more detail${ENDCOLOR}
    |Resource Group: $resource_group || Cluster Name: $cluster_name
    +-------------------------------------------------------------------------+       
    |$(check_cluster_status)
    +-------------------------------------------------------------------------+
    |Run: az aks start --resource-group $resource_group --name $cluster_name
    +-------------------------------------------------------------------------+
    |$(aks_get_url)
    +-------------------------------------------------------------------------+
    "
    fi
    }
    cluster_on_off
}

# ---

# Manual
manual() {
    echo -e "Get AKS Credentials: 'https://docs.microsoft.com/en-US/cli/azure/aks#az_aks_get_credentials'"
    echo -e "Azure CLI Commands
    'https://learn.microsoft.com/en-us/cli/azure/vmss?view=azure-cli-latest#commands'
    "

exit 0
}

if [[ $1 == "-h" || $1 == "--help" || "$1" == "--h" ]]; then
    manual
    exit 1
fi

echo "Choose an option:"
echo "1. Azure Resource Group (Create, Delete, Check)"
echo "2. AKS Operations (Create, Delete...)"
echo "3. VMSS Operations"
echo "4. Run command on VM"
echo "5. Backup Pod Disruption Budget (PDB)"
echo "6. Check ACR Connection"
echo "7. Check Top (Pods and Nodes)"
echo "8. Get TCPDUMP"
echo "9. Get SysLog"
echo "10. Information"
echo "98. Tools (Install az-cli, kubectl or helm)"
echo "99. Cluster Analysis (Top Nodes, Top Pods, MSI, SPN, PDB, PowerState, Credentials, AKS URL...)"
read option

case $option in
    1)
        az_resource_group
        ;;
    2)  
        az_aks
        ;;
    3)
        az_vmss
        ;;
    4)
        az_vm_run_command
        ;;
    5)
        backup_pdb
        ;;
    6)
        check_acr_connection
        ;;
    7) 
        aks_check_top
        ;;
    8)
        aks_tcpdump
        ;;
    9) 
        aks_get_syslog
        ;;
    10)
        az_aks_information
        ;;
    98)
        az_cli_tools
        ;;
    99)
        cluster_analysis
        ;;
    *)
        echo "Invalid option"
        ;;
esac
